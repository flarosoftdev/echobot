# (c) 2025 Flarosoft Development.
# Github Repository: https://github.com/flarosoftdev/Telegram-Mesage-Sender.git
# Developer's Telegram channel: https://t.me/flarosoftdev
# Telegram Channel with Flarosoft Bots: https://t.me/FlarosoftBots

__author__ = "Flarosoft"
__version__ = "0.3"
__author_email__ = "flarosoft.dev@gmail.com"

import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

TOKEN = "BOT_TOKEN"

logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

MAX_MESSAGES = 10
MIN_DELAY = 0.5
delay = 2

async def send_messages(update: Update, context: CallbackContext) -> None:
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send @–≥—Ä—É–ø–ø–∞ —Ç–µ–∫—Å—Ç –∫–æ–ª-–≤–æ")
        return
    
    chat_username = args[0]
    text = " ".join(args[1:-1])
    try:
        count = int(args[-1])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    if count > MAX_MESSAGES:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {MAX_MESSAGES}.")
        return
    
    for i in range(1, count + 1):
        message_text = text
        await context.bot.send_message(chat_id=chat_username, text=message_text)
        await asyncio.sleep(delay)
    
    await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {chat_username}.")

async def set_delay(update: Update, context: CallbackContext) -> None:
    global delay
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setdelay <–≤—Ä–µ–º—è_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö>")
        return
    try:
        new_delay = float(context.args[0])
        if new_delay < MIN_DELAY:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ {MIN_DELAY} —Å–µ–∫—É–Ω–¥.")
            return
        delay = new_delay
        await update.message.reply_text(f"–ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {delay} —Å–µ–∫—É–Ω–¥.")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

async def send_sticker(update: Update, context: CallbackContext) -> None:
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sticker @–≥—Ä—É–ø–ø–∞ <URL_–∏–ª–∏_—Å—Ç–∏–∫–µ—Ä_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return
    
    chat_username = args[0]
    sticker = args[1]
    try:
        count = int(args[2])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    if count > MAX_MESSAGES:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {MAX_MESSAGES}.")
        return
    
    for i in range(count):
        await context.bot.send_sticker(chat_id=chat_username, sticker=sticker)
        await asyncio.sleep(delay)
    
    await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ {chat_username}.")

async def send_image(update: Update, context: CallbackContext) -> None:
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /image @–≥—Ä—É–ø–ø–∞ <URL_–∏–ª–∏_–ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return
    
    chat_username = args[0]
    image = args[1]
    try:
        count = int(args[2])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    if count > MAX_MESSAGES:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {MAX_MESSAGES}.")
        return
    
    for i in range(count):
        await context.bot.send_photo(chat_id=chat_username, photo=image)
        await asyncio.sleep(delay)
    
    await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ {chat_username}.")

async def send_gif(update: Update, context: CallbackContext) -> None:
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gif @–≥—Ä—É–ø–ø–∞ <URL_–∏–ª–∏_–ø—É—Ç—å_–∫_GIF> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return
    
    chat_username = args[0]
    gif = args[1]
    try:
        count = int(args[2])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    if count > MAX_MESSAGES:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GIF –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {MAX_MESSAGES}.")
        return
    
    for i in range(count):
        await context.bot.send_animation(chat_id=chat_username, animation=gif)
        await asyncio.sleep(delay)
    
    await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} GIF –≤ {chat_username}.")

async def send_video(update: Update, context: CallbackContext) -> None:
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /video @–≥—Ä—É–ø–ø–∞ <URL_–∏–ª–∏_–ø—É—Ç—å_–∫_–≤–∏–¥–µ–æ> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return
    
    chat_username = args[0]
    video = args[1]
    try:
        count = int(args[2])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    if count > MAX_MESSAGES:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {MAX_MESSAGES}.")
        return
    
    for i in range(count):
        await context.bot.send_video(chat_id=chat_username, video=video)
        await asyncio.sleep(delay)
    
    await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –≤–∏–¥–µ–æ –≤ {chat_username}.")

async def send_audio(update: Update, context: CallbackContext) -> None:
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /audio @–≥—Ä—É–ø–ø–∞ <URL_–∏–ª–∏_–ø—É—Ç—å_–∫_–∞—É–¥–∏–æ> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return
    
    chat_username = args[0]
    audio = args[1]
    try:
        count = int(args[2])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    if count > MAX_MESSAGES:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {MAX_MESSAGES}.")
        return
    
    for i in range(count):
        await context.bot.send_audio(chat_id=chat_username, audio=audio)
        await asyncio.sleep(delay)
    
    await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∞—É–¥–∏–æ –≤ {chat_username}.")

async def sticker_id(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å—Ç–∏–∫–µ—Ä–∞."""
    sticker = update.message.sticker
    if not sticker:
        return

    await update.message.reply_text(f"üìå ID –≤–∞—à–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞: `{sticker.file_id}`", parse_mode="Markdown")

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("üëãüèª *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!*\n"
                                    "\n- –û—Ç–ø—Ä–∞–≤—å—Ç–µ /send (@username –≥—Ä—É–ø–ø—ã) (—Ç–µ–∫—Å—Ç) (–∫–æ–ª-–≤–æ)\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setdelay (–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏.\n"
                                    "- –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, GIF, –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                    "- /sticker (@username –≥—Ä—É–ø–ø—ã) (URL –∏–ª–∏ ID —Å—Ç–∏–∫–µ—Ä–∞) (–∫–æ–ª-–≤–æ)\n"
                                    "- /image (@username –≥—Ä—É–ø–ø—ã) (URL –∏–ª–∏ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é) (–∫–æ–ª-–≤–æ)\n"
                                    "- /gif (@username –≥—Ä—É–ø–ø—ã) (URL –∏–ª–∏ –ø—É—Ç—å –∫ GIF) (–∫–æ–ª-–≤–æ)\n"
                                    "- /video (@username –≥—Ä—É–ø–ø—ã) (URL –∏–ª–∏ –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ) (–∫–æ–ª-–≤–æ)\n"
                                    "- /audio (@username –≥—Ä—É–ø–ø—ã) (URL –∏–ª–∏ –ø—É—Ç—å –∫ –∞—É–¥–∏–æ) (–∫–æ–ª-–≤–æ)\n"
                                    "- –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —Å—Ç–∏–∫–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.\n"
                                    "\n‚ùó –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, *–±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ*, –≤ –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ *–≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π*.",
                                    parse_mode="Markdown")

def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("send", send_messages))
    app.add_handler(CommandHandler("setdelay", set_delay))
    app.add_handler(CommandHandler("sticker", send_sticker))
    app.add_handler(CommandHandler("image", send_image))
    app.add_handler(CommandHandler("gif", send_gif))
    app.add_handler(CommandHandler("video", send_video))
    app.add_handler(CommandHandler("audio", send_audio))
    app.add_handler(MessageHandler(filters.Sticker.ALL, sticker_id))
    
    app.run_polling()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        raise RuntimeError(f"An error occured during running this script: {e}.")
else:
    raise RuntimeError("Cannot run \"tg_group_flood\" as module.")
